var = {
    "cells": [
        {
            "cell_type": "code",
            "execution_count": 1,
            "metadata": {},
            "outputs": [],
            "source": [
                "import nltk.classify.util\n",
                "from nltk.classify import NaiveBayesClassifier\n",
                "from nltk.corpus import movie_reviews\n",
                "from nltk.corpus import stopwords\n",
                "from nltk.tokenize import word_tokenize\n",
                "from nltk.corpus import wordnet"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 24,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "['i',\n",
                            " 'me',\n",
                            " 'my',\n",
                            " 'myself',\n",
                            " 'we',\n",
                            " 'our',\n",
                            " 'ours',\n",
                            " 'ourselves',\n",
                            " 'you',\n",
                            " \"you're\",\n",
                            " \"you've\",\n",
                            " \"you'll\",\n",
                            " \"you'd\",\n",
                            " 'your',\n",
                            " 'yours',\n",
                            " 'yourself',\n",
                            " 'yourselves',\n",
                            " 'he',\n",
                            " 'him',\n",
                            " 'his',\n",
                            " 'himself',\n",
                            " 'she',\n",
                            " \"she's\",\n",
                            " 'her',\n",
                            " 'hers',\n",
                            " 'herself',\n",
                            " 'it',\n",
                            " \"it's\",\n",
                            " 'its',\n",
                            " 'itself',\n",
                            " 'they',\n",
                            " 'them',\n",
                            " 'their',\n",
                            " 'theirs',\n",
                            " 'themselves',\n",
                            " 'what',\n",
                            " 'which',\n",
                            " 'who',\n",
                            " 'whom',\n",
                            " 'this',\n",
                            " 'that',\n",
                            " \"that'll\",\n",
                            " 'these',\n",
                            " 'those',\n",
                            " 'am',\n",
                            " 'is',\n",
                            " 'are',\n",
                            " 'was',\n",
                            " 'were',\n",
                            " 'be',\n",
                            " 'been',\n",
                            " 'being',\n",
                            " 'have',\n",
                            " 'has',\n",
                            " 'had',\n",
                            " 'having',\n",
                            " 'do',\n",
                            " 'does',\n",
                            " 'did',\n",
                            " 'doing',\n",
                            " 'a',\n",
                            " 'an',\n",
                            " 'the',\n",
                            " 'and',\n",
                            " 'but',\n",
                            " 'if',\n",
                            " 'or',\n",
                            " 'because',\n",
                            " 'as',\n",
                            " 'until',\n",
                            " 'while',\n",
                            " 'of',\n",
                            " 'at',\n",
                            " 'by',\n",
                            " 'for',\n",
                            " 'with',\n",
                            " 'about',\n",
                            " 'against',\n",
                            " 'between',\n",
                            " 'into',\n",
                            " 'through',\n",
                            " 'during',\n",
                            " 'before',\n",
                            " 'after',\n",
                            " 'above',\n",
                            " 'below',\n",
                            " 'to',\n",
                            " 'from',\n",
                            " 'up',\n",
                            " 'down',\n",
                            " 'in',\n",
                            " 'out',\n",
                            " 'on',\n",
                            " 'off',\n",
                            " 'over',\n",
                            " 'under',\n",
                            " 'again',\n",
                            " 'further',\n",
                            " 'then',\n",
                            " 'once',\n",
                            " 'here',\n",
                            " 'there',\n",
                            " 'when',\n",
                            " 'where',\n",
                            " 'why',\n",
                            " 'how',\n",
                            " 'all',\n",
                            " 'any',\n",
                            " 'both',\n",
                            " 'each',\n",
                            " 'few',\n",
                            " 'more',\n",
                            " 'most',\n",
                            " 'other',\n",
                            " 'some',\n",
                            " 'such',\n",
                            " 'no',\n",
                            " 'nor',\n",
                            " 'not',\n",
                            " 'only',\n",
                            " 'own',\n",
                            " 'same',\n",
                            " 'so',\n",
                            " 'than',\n",
                            " 'too',\n",
                            " 'very',\n",
                            " 's',\n",
                            " 't',\n",
                            " 'can',\n",
                            " 'will',\n",
                            " 'just',\n",
                            " 'don',\n",
                            " \"don't\",\n",
                            " 'should',\n",
                            " \"should've\",\n",
                            " 'now',\n",
                            " 'd',\n",
                            " 'll',\n",
                            " 'm',\n",
                            " 'o',\n",
                            " 're',\n",
                            " 've',\n",
                            " 'y',\n",
                            " 'ain',\n",
                            " 'aren',\n",
                            " \"aren't\",\n",
                            " 'couldn',\n",
                            " \"couldn't\",\n",
                            " 'didn',\n",
                            " \"didn't\",\n",
                            " 'doesn',\n",
                            " \"doesn't\",\n",
                            " 'hadn',\n",
                            " \"hadn't\",\n",
                            " 'hasn',\n",
                            " \"hasn't\",\n",
                            " 'haven',\n",
                            " \"haven't\",\n",
                            " 'isn',\n",
                            " \"isn't\",\n",
                            " 'ma',\n",
                            " 'mightn',\n",
                            " \"mightn't\",\n",
                            " 'mustn',\n",
                            " \"mustn't\",\n",
                            " 'needn',\n",
                            " \"needn't\",\n",
                            " 'shan',\n",
                            " \"shan't\",\n",
                            " 'shouldn',\n",
                            " \"shouldn't\",\n",
                            " 'wasn',\n",
                            " \"wasn't\",\n",
                            " 'weren',\n",
                            " \"weren't\",\n",
                            " 'won',\n",
                            " \"won't\",\n",
                            " 'wouldn',\n",
                            " \"wouldn't\"]"
                        ]
                    },
                    "execution_count": 24,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "stopwords.words(\"english\")"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 26,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "['The', 'program', 'was', 'open', 'to', 'all', 'women', 'between', 'the', 'ages', '17', 'and', '35', ',', 'in', 'good', 'health', ',', 'who', 'had', 'graduated', 'from', 'an', 'accredited', 'high', 'school']\n"
                    ]
                }
            ],
            "source": [
                "para = \"The program was open to all women between the ages 17 and 35, in good health, who had graduated from an accredited high school\"\n",
                "words = word_tokenize(para)\n",
                "print(words)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 27,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "['The', 'program', 'open', 'women', 'ages', '17', '35', ',', 'good', 'health', ',', 'graduated', 'accredited', 'high', 'school']\n"
                    ]
                }
            ],
            "source": [
                "useful_words = [word for word in words if word not in stopwords.words('english')]\n",
                "print(useful_words)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "from nltk.corpus import movie_reviews"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "movie_reviews.words()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "movie_reviews.categories()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "all_words = movie_reviews.words()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "freq_dist = nltk.FreqDist(all_words)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "freq_dist.most_common(20)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": []
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": []
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.7.3"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 2
}
